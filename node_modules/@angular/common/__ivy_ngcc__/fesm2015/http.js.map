{"version":3,"file":"http.js","sources":["../../../../../../packages/common/http/src/backend.ts","../../../../../../packages/common/http/src/headers.ts","../../../../../../packages/common/http/src/params.ts","../../../../../../packages/common/http/src/context.ts","../../../../../../packages/common/http/src/request.ts","../../../../../../packages/common/http/src/response.ts","../../../../../../packages/common/http/src/client.ts","../../../../../../packages/common/http/src/interceptor.ts","../../../../../../packages/common/http/src/jsonp.ts","../../../../../../packages/common/http/src/xhr.ts","../../../../../../packages/common/http/src/xsrf.ts","../../../../../../packages/common/http/src/module.ts","../../../../../../packages/common/http/public_api.ts","../../../../../../packages/common/http/index.ts","../../../../../../packages/common/http/http.ts"],"names":["XhrFactory","parseCookieValue","XhrFactory_fromAngularCommon"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map!.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HttpResponse` as a JSON object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the reuested response, wuth body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JSON object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JSON object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a responmse body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the\n   * response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object and returns the full\n   * `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a\n   * JSON object and returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP\n   * response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object\n   * and returns an observable of JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JSON object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n *\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      let cancelled: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true;\n\n        // Remove the event listeners so they won't run if the events later fire.\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private jsonp: JsonpClientBackend) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle(req as HttpRequest<never>);\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(\n          `Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n        const status: number = xhr.status === 1223 ? HttpStatusCode.NoContent : xhr.status;\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== HttpStatusCode.NoContent) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? HttpStatusCode.Ok : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = {error, text: body} as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody!);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME');\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME');\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(\n      private tokenService: HttpXsrfTokenExtractor,\n      @Inject(XSRF_HEADER_NAME) private headerName: string) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[]|null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory as XhrFactory_fromAngularCommon} from '@angular/common';\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport type XhrFactory = XhrFactory_fromAngularCommon;\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n * @see `XhrFactory`\n * @deprecated\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\n */\nexport const XhrFactory = XhrFactory_fromAngularCommon;\n\nexport {HttpBackend, HttpHandler} from './src/backend';\nexport {HttpClient} from './src/client';\nexport {HttpContext, HttpContextToken} from './src/context';\nexport {HttpHeaders} from './src/headers';\nexport {HTTP_INTERCEPTORS, HttpInterceptor} from './src/interceptor';\nexport {JsonpClientBackend, JsonpInterceptor} from './src/jsonp';\nexport {HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpInterceptingHandler as ɵHttpInterceptingHandler} from './src/module';\nexport {HttpParameterCodec, HttpParams, HttpParamsOptions, HttpUrlEncodingCodec} from './src/params';\nexport {HttpRequest} from './src/request';\nexport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpProgressEvent, HttpResponse, HttpResponseBase, HttpSentEvent, HttpStatusCode, HttpUploadProgressEvent, HttpUserEvent} from './src/response';\nexport {HttpXhrBackend} from './src/xhr';\nexport {HttpXsrfTokenExtractor} from './src/xsrf';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NoopInterceptor as ɵangular_packages_common_http_http_a} from './src/interceptor';\nexport {JsonpCallbackContext as ɵangular_packages_common_http_http_b} from './src/jsonp';\nexport {jsonpCallbackContext as ɵangular_packages_common_http_http_c} from './src/module';\nexport {HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_f,HttpXsrfInterceptor as ɵangular_packages_common_http_http_g,XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_d,XSRF_HEADER_NAME as ɵangular_packages_common_http_http_e} from './src/xsrf';"]}